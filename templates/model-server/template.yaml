apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: model-server
  title: Model Server, No Application
  description: Deploy a granite-3.1 8b model with a vLLM server. While no application is configured, this model server can be utilized in other Software Templates, like a Chatbot Application for instance.
  tags: ["ai", "vllm", "modelserver"]
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Information
      required:
        - name
        - owner
        - modelServer
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
          ui:field: EntityNamePicker
          maxLength: 63
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: user:guest
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
        modelServer:
          # SED_LLM_SERVER_START
          title: Model Server
          description:
          |
            

            vLLM: A high throughput, memory efficient inference and serving engine with GPU support for LLMs in OpenShift. If you choose vLLM, ensure that your cluster has Nvidia GPU supported (with compute capability 7.0 or higher). Also, it should have enough CPU & memory resources for the model you would like to work with. | [Learn more](https://github.com/rh-aiservices-bu/llm-on-openshift/tree/main/llm-servers/vllm/gpu)
          type: string
          enum:
            - vLLM
          # SED_LLM_SERVER_END
      dependencies:
        modelServer:
          oneOf:
            # SED_LLM_SERVER_START
            - properties:
                modelServer:
                  const: vLLM
                modelNameDeployed:
                  title: Model Name
                  description: Text Generation | Apache-2.0 | [Learn more](https://huggingface.co/ibm-granite/granite-3.1-8b-instruct)
                  default: ibm-granite/granite-3.1-8b-instruct
                  type: string
                  enum:
                    - ibm-granite/granite-3.1-8b-instruct
            # SED_LLM_SERVER_END

    - title: Application Repository Information
      required:
        - hostType
        - repoOwner
        - repoName
        - branch
      properties:
        hostType:
          title: Host Type
          type: string
          enum:
            - GitHub
            - GitLab
          default: GitHub
        repoOwner:
          title: Repository Owner
          type: string
          ui:help: The organization, user or project that this repo will belong to
        repoName:
          title: Repository Name
          type: string
        branch:
          title: Repository Default Branch
          type: string
          default: main
      dependencies:
        hostType:
          oneOf:
            - required:
                - githubServer
              properties:
                hostType:
                    const: GitHub
                githubServer:
                  title: Repository Server
                  type: string
                  default: github.com
                  ui:help: "You can also provide the on-prem github server, example: github-github.apps.cluster-ljg9z.sandbox219.opentlc.com"
            - required:
                - gitlabServer
              properties:
                hostType:
                    const: GitLab
                gitlabServer:
                  title: Repository Server
                  type: string
                  default: gitlab.com
                  ui:help: "You can also provide the on-prem gitlab server, example: gitlab-gitlab.apps.cluster-ljg9z.sandbox219.opentlc.com"
    - title: Deployment Information
      required:
        - namespace
      properties:
        namespace:
          title: Deployment Namespace
          type: string
          default: rhdh-app
          ui:autofocus: true
          ui:options:
            rows: 5
  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # The final step is to register our new component in the catalog.
    - id: fetch-gitops-skeleton
      name: Fetch Gitops Skeleton
      action: fetch:template
      input:
        url: ../../skeleton/gitops-template
        targetPath: gitops
        values:
          name: ${{ parameters.name }}
          appName: ${{ parameters.name }}-gitops # for now just use the component name, since it's single component app
          description: This is GitOps manifest for ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          rhdhNamespace: ai-rhdh
          # example: github.com?owner=<owner>&repo=<srcRepo>, the gitops repo name will be <srcRepo>-gitops
          repoURL: https://${{ parameters.githubServer if parameters.hostType === 'GitHub' else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops
          srcRepoURL: https://${{ parameters.githubServer if parameters.hostType === 'GitHub' else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}
          argoComponentOverlays: './components/${{ parameters.name }}/overlays'
          owner: ${{ parameters.owner }}
          argoNS: ai-rhdh
          argoProject: default
          secretRef: ${{ parameters.hostType === 'GitLab' }}
          gitSecret: gitlab-auth-secret
          gitSecretKey: password
          webhookSecret: pipelines-secret
          webhookSecretKey: webhook.secret
          defaultBranch: main
          initContainer: 
          modelInitCommand: "['/usr/bin/install', '/model/model.file', '/shared/']"
          modelPath: "/model/model.file"
          appContainer: ${{ 'quay.io/redhat-ai-dev/ai-template-bootstrap-app:latest' if parameters.hostType === 'GitHub' else '' }}
          appPort: 8501
          modelServiceContainer: 
          modelServicePort: 8001
          # SED_LLM_SERVER_START
          # for vllm
          vllmSelected: ${{ parameters.modelServer === 'vLLM' }}
          vllmModelServiceContainer: quay.io/redhat-ai-dev/vllm-openai-ubi9:v0.6.6
          modelName: ${{ parameters.modelName if parameters.modelServer === 'Existing model server' else 'ibm-granite/granite-3.1-8b-instruct' }}
          maxModelLength: 4096
          # SED_LLM_SERVER_END
          existingModelServer: ${{ parameters.modelServer === 'Existing model server' }}
          supportApp: false
    - action: fs:rename
      id: renameComponentDir
      name: Rename Component Directory
      input:
        files:
          - from: gitops/components/http
            to: gitops/components/${{ parameters.name }}
            overwrite: true
    - id: publish-github-gitops
      name: Publish GitOps Repository to Github
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        sourcePath: gitops
        allowedHosts: ['${{ parameters.githubServer }}']
        description: This is GitOps repository for ${{ parameters.name }}
        repoUrl:  ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}-gitops
        defaultBranch: "main"
        protectDefaultBranch: false
        repoVisibility: "public"
    # This action creates a new GitLab repository and publishes the files in the workspace directory to the repository.
    - id: publish-gitlab-gitops
      name: Publish GitOps Repository to GitLab
      action: publish:gitlab
      if: ${{ parameters.hostType === 'GitLab' }}
      input:
        sourcePath: gitops
        allowedHosts: ['${{ parameters.gitlabServer }}']
        description: This is GitOps repository for ${{ parameters.name }}
        repoUrl:  ${{ parameters.gitlabServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}-gitops
        defaultBranch: "main"
        protectDefaultBranch: false
        repoVisibility: "public"
    - id: wait-for-github-repository
      name: Waiting for Repository Availability
      action: 'debug:wait'
      input:
        seconds: 3
    - id: register-gitops
      name: Register Gitops
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-github-gitops'].output.repoContentsUrl if steps['publish-github-gitops'].output else steps['publish-gitlab-gitops'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.name }}-app-of-apps
        # name set in rhdh config
        argoInstance: default
        namespace: ai-rhdh
        repoUrl: https://${{ parameters.githubServer if parameters.hostType === 'GitHub' else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops.git
        path: './app-of-apps'


  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: GitOps Repository
        url: ${{ steps['publish-github-gitops'].output.remoteUrl if steps['publish-github-gitops'].output else steps['publish-gitlab-gitops'].output.remoteUrl }}
      - title: Open GitOps Resource in Catalog
        icon: catalog
        entityRef: ${{ steps['register-gitops'].output.entityRef }}